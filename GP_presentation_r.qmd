---
title: "Gaussian Process"
subtitle: "How it works using simulation"
author: "Francisco Cardozo"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: revealjs
editor_options: 
  chunk_output_type: console
---


## Agenda

* Exploring Multivariate data

* Plotting multivariate data

* Discussing more on Kernels

## Import data

We begin by creating a data set that follows a multivariate normal distribution.

```{r}
library(tidyverse)
library(ggcorrplot)
library(GGally)
the_data <- read_csv("data.csv")
```

## Plot the data

Now, we visualize the correlation matrix of the data using a correlation plot. This will provide a quick overview of the relationships between different variables.

```{r}
the_data |>
  cor() |>
  ggcorrplot()
```

## Plot the data

We can further explore these relationships using a pairs plot, which shows scatter plots for pairwise relationships and histograms along the diagonal.

```{r}
the_data |>
  ggpairs()
```

## Plot two variables?

To focus on the relationship between two specific variables, we plot var1 against var2. Here, we use row numbers as ids for the data points.

```{r}
the_data |>
  mutate(id = row_number()) |>
  select(var1, var2, id) |>
  ggplot(aes(x = var1, y = var2)) +
  geom_point() +
  scale_y_continuous(limits = c(-3, 3))

```

## Plot three variables?

To plot three variables, we might consider using 3D scatter plots or other visualization methods.

```{r}
# Install and load the necessary package
# install.packages("plotly")
library(plotly)

to_plot <- the_data %>%
  sample_n(20)

# Assuming the_data is a dataframe with three columns: var1, var2, var3
fig <- plot_ly(to_plot, x = ~var1, y = ~var2, z = ~var3, type = "scatter3d", mode = "markers")

# Print the plot
fig

```


## Plot four variables?

It is not possible, but... 

We can star simple, selecting one of the rows, reshaping the data, and plotting each variable as a point on the line.

(make it interactive)

```{r}
the_data |>
  mutate(id = row_number()) |>
  select(var1, var2, id) |>
  filter(id == sample(1:100, 1)) |>
  pivot_longer(-id) |>
  mutate(name = factor(name)) |>
  ggplot(aes(x = name, y = value, group = id)) +
  geom_point() +
  geom_line() +
  scale_y_continuous(limits = c(-3, 3))
```

## Plot another two variables

Similarly, we can select another pair of variables and visualize their relationship.

```{r}
the_data |>
  mutate(id = row_number()) |>
  select(var1, var9, id) |>
  filter(id == sample(1:100, 1)) |>
  pivot_longer(-id) |>
  ggplot(aes(x = name, y = value, group = id)) +
  geom_point() +
  geom_line() +
  scale_y_continuous(limits = c(-3, 3))
```

## Plot the complete data set

To get an overview of all variables in a single plot, we can pivot the entire data set and plot each variable on the x-axis against its value on the y-axis.

```{r}
the_data |>
  mutate(id = row_number()) |>
  filter(id == sample(1:100, 1)) |>
  pivot_longer(-c(id)) |>
  mutate(name = factor(name,
    levels = paste0("var", seq(1, 10, 1))
  )) |>
  ggplot(aes(x = name, y = value, group = id)) +
  geom_point() +
  geom_line() +
  scale_y_continuous(limits = c(-3.3, 3.3))
```

## Plot the complete data set

Finally, we can take more than one subsample.
(make it interactive)

```{r}
the_data |>
  mutate(id = row_number()) |>
  filter(id %in% sample(1:100, 3)) |>
  pivot_longer(-id) |>
  ggplot(aes(x = name, y = value, group = id)) +
  geom_point() +
  geom_line() +
  scale_y_continuous(limits = c(-3, 3))
```

## Create the RBF graph...
